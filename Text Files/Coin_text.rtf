{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 import java.awt.Rectangle;\
import java.awt.image.BufferedImage;\
import java.io.File;\
import java.io.IOException;\
import java.util.Random;\
\
import javax.imageio.ImageIO;\
\
public class Coin\
\{\
	//Spawning Chance\
	public static int coinPrb = 3;\
	\
	//Movement\
	public int xPos;\
	public int yPos;\
	\
	private int xSpeed;\
	private int ySpeed;\
	\
	private DynamicTimer tmrSlow = new DynamicTimer(4);\
	private DynamicTimer tmrLife = new DynamicTimer(50 * 30);\
\
	public int width;\
	public int height;\
	\
	//Info\
	public int value;\
	public int type;\
	public int intColor;\
	\
	//Image\
	private static BufferedImage[][] coinPic = new BufferedImage[2][3];\
	public BufferedImage image;\
\
	//Sound\
	public static File[] Sound = new File[3];\
\
	Random gen = new Random();\
	\
	//InitializeFiles\
	public static void InitializeFiles ()\
	\{\
		String directory = null;\
		String sDirectory = null;\
		\
		//Images\
		try\
		\{\
			//Blue\
			directory = "Resource2/Images/Coin/SCoin.png";\
			coinPic[0][0] = ImageIO.read(new File(directory));\
			\
			directory = "Resource2/Images/Coin/LCoin.png";\
			coinPic[0][1] = ImageIO.read(new File(directory));\
			\
			directory = "Resource2/Images/Coin/Health.png";\
			coinPic[0][2] = ImageIO.read(new File(directory));\
		\}\
		catch (IOException e)\
		\{\
			System.out.println("File not found: " + directory);\
		\}\
		\
		//Sounds\
		try\
		\{\
			sDirectory = "Resource/Audio/Beeps/CoinMedSound.wav";\
			Sound[0] = new File(sDirectory);\
			\
			sDirectory = "Resource/Audio/Beeps/CoinLargeSound.wav";\
			Sound[1] = new File(sDirectory);\
			\
			sDirectory = "Resource/Audio/Beeps/HealthPickUp.wav";\
			Sound[2] = new File(sDirectory);\
		\}\
		catch (Exception e)\
	    \{System.out.println("Sound file not found: " + sDirectory);\}\
	\}\
	\
	public Coin (int color, int x, int y, int t)\
	\{\
		this.type = t;\
		this.intColor = color;\
		\
		//Position\
		this.xPos = x;\
		this.yPos = y;\
\
		//Speed\
		this.xSpeed = ran(4, 12);\
		this.ySpeed = ran(4, 12);\
		\
		if (ranBln())\
		\{this.xSpeed *= -1;\}\
		\
		if (ranBln())\
		\{this.ySpeed *= -1;\}\
		\
		//Type and Size\
		if (this.type == 0)\
		\{\
			if (ran(1, 4) == 1)\
			\{this.type = 2;\}\
			\
			else\
			\{this.type = 1;\}\
		\}\
\
		if (this.type == 1)\
		\{\
			this.value = 1;\
			\
			this.width = 32;\
			this.height = 32;\
			\
			this.image = coinPic[this.intColor][0];\
		\}\
		\
		else if (this.type == 2)\
		\{\
			this.value = 2;\
			\
			this.width = 32;\
			this.height = 32;\
			\
			this.image = coinPic[this.intColor][1];\
		\}\
		\
		else if (this.type == 3)\
		\{\
			this.value = 2;\
			\
			this.width = 32;\
			this.height = 32;\
			\
			this.image = coinPic[this.intColor][2];\
		\}\
	\}\
	\
	//Update Manager\
	public boolean update ()\
	\{\
		this.move();\
		this.offScreenChk();\
		\
		if (tmrSlow.tick())\
		\{this.slow();\}\
		\
		if (tmrLife.tick())\
		\{return true;\}\
		\
		else\
		\{return false;\}\
	\}\
	\
	//Moving\
	public void move ()\
	\{\
		this.xPos += this.xSpeed;\
		this.yPos += this.ySpeed;\
	\}\
	\
	//Off Screen Check\
	public void offScreenChk ()\
	\{\
		if (this.xPos > GameBoard.boardWidth) \{this.xPos = 0 - this.width;\}\
		if (this.yPos > GameBoard.boardHeight) \{this.yPos = 0 - this.height;\}\
		\
		if (this.xPos < 0 - this.width) \{this.xPos = GameBoard.boardWidth;\}\
		if (this.yPos < 0 - this.height) \{this.yPos = GameBoard.boardHeight;\}\
	\}\
	\
	//Slow\
	public void slow ()\
	\{\
		int speedInc = 1;\
\
		if (this.xSpeed < -1)\{this.xSpeed += speedInc;\}\
		if (this.xSpeed > 1)\{this.xSpeed -= speedInc;\}\
		\
		if (this.ySpeed < -1)\{this.ySpeed += speedInc;\}\
		if (this.ySpeed > 1)\{this.ySpeed -= speedInc;\}\
	\}\
	\
	//CollCheck\
	public boolean collChk (Ship ship)\
	\{\
		Rectangle coinBox = this.getBounds();\
		Rectangle shipBox = ship.getBounds();\
		\
		if (coinBox.intersects(shipBox))\
		\{return true;\}\
		\
		else\
		\{return false;\}\
	\}\
	\
	//Getting Bounds\
	public Rectangle getBounds ()\
	\{\
		return new Rectangle(this.xPos, this.yPos, this.width, this.height);\
	\}\
	\
	//Randomizer z!\
	private int ran (int min, int max)\
	\{return gen.nextInt((max - min) + 1) + min;\}\
	\
	private boolean ranBln ()\
	\{if (ran(0, 1) == 0)\{return true;\} else\{return false;\}\}\
\}}